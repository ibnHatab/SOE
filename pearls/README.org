Pearls of Functional Algorithm Design

( make it Work, make it Right, make it Fast )

http://www.atamo.com/blog/how-to-read-pearls-by-richard-bird-1/

AUTHOR: Richard Bird


* Table of Contents

  1. The smallest free number ([[file:src/TheSmallestFreeNumber.hs][TheSmallestFreeNumber.hs]])
    #+BEGIN_SRC lang Haskell
minfree :: [Int] -> Int
minfree xs = head ([0..] \\ xs)
#+END_SRC
  2. A surpassing problem  ( [[file:src/ASurpassingProblem.hs][ASurpassingProblem.hs]] )
    #+BEGIN_SRC
-- maximum surpassing count
msc :: Ord a => [a] -> Int
msc xs =  maximum [scount z zs | z : zs <- tails xs]

scount x xs = length (filter (> x) xs)

tails [] = []
tails (x : xs) = xs : (tails xs)

#+END_SRC
  3. Improving on saddleback search ( [[file:src/ImprovingOnSaddlebackSearch.hs][ImprovingOnSaddlebackSearch.hs]] )
    Lambert algorithm
    #+BEGIN_SRC
invert :: (Enum a, Eq a, Num a) => (a -> a -> a) -> a -> [(a,a)]
invert f z = [(x, y) | x <-[0..z], y <- [0..z], f x y == z ]
#+END_SRC
  4. A selection problem ( [[file:src/ASelectionProblem.hs][ASelectionProblem.hs]] )
    #+BEGIN_SRC
smallest k (xs, us) = union (xs, us) !! k

union (xs, []) = xs
union ([], ys) = ys
union (xss@(x:xs), yss@(y:ys))
  | x < y = x : union (xs, yss)
  | x >= y = y : union (xss, ys)

#+END_SRC
  5. Sorting pairwise sums ( [[file:src/SortingPairwiseSums.hs][SortingPairwiseSums.hs]] )
    #+BEGIN_SRC
-- sortsum :: [Int] -> [Int] -> [Int]
-- sortsum xs ys = sortBy cmp [ x + y | x <-xs, y <-ys]
#+END_SRC
  6. Making a century ( [[file:src/MakingACentury.hs][MakingACentury.hs]] )
   | greedy |
    #+BEGIN_SRC
type Expression = [Term]
type Term = [Factor]
type Factor = [Digit]
type Digit = Int

res = filter (good . valExpr) (expressions' digits)

#+END_SRC
  7. Building a tree with minimum height ( [[file:src/BuildingATreeWithMinimumHeight.hs][BuildingATreeWithMinimumHeight.hs]] )
   | greedy |
    #+BEGIN_SRC
mincostTree :: [Int] -> Tree
mincostTree = minBy cost . trees''

trees :: [Int] -> [Tree]
trees [x] = [Leaf x]
trees (x : xs) = concatMap (prefixes x) (trees xs)

#+END_SRC
  8. Unravelling greedy algorithms ( [[file:src/UnravellingGreedyAlgorithms.hs][UnravellingGreedyAlgorithms.hs]])
   | greedy | linear |
    #+BEGIN_SRC
supravel' :: Ord a => [a] -> [[a]]
supravel' = foldr insert' []

insert' :: Ord a => a -> [[a]] -> [[a]]
insert' x [] = [[x]]
insert' x (xs:xss) = if x <= head xs
                     then (x:xs) : xss
                     else xs : insert' x xss

#+END_SRC
  9. Finding celebrities ( [[file:src/FindingCelebrities.hs][FindingCelebrities.hs]] )
    | linear |
    #+BEGIN_SRC
cclique'' :: Party -> [Person]
cclique'' = foldr op []
op p cs
    | null cs           = [p]
    | not (p `knows` c) = [p]
    | not (c `knows` p) = cs
    | otherwise         = p:cs
    where c = head cs

#+END_SRC
  10. Removing duplicates ( [[file:src/RemovingDuplicates.hs][RemovingDuplicates.hs]] )
    | O(n log n) |
    #+BEGIN_SRC
nub' :: Eq a => [a] -> [a]
nub' [] = []
nub' (x:xs) = x : (nub' (xs \\ [x]) )

#+END_SRC
  11. Ranking suffixes ([[file:src/RankingSuffixes.hs][RankingSuffixes.hs]])
      #+BEGIN_SRC

rank :: Ord a => [a] -> [Int]
rank xs = map (\x -> length (filter (<x) xs)) xs

ranktails :: Ord a => [a] -> [Int]
ranktails = rank . tails

      #+END_SRC
  12. Not the maximum segment sum ([[file:src/NotTheMaximumSegmentSum.hs][NotTheMaximumSegmentSum.hs]])
      #+BEGIN_SRC
mnss :: [Int] -> Int
mnss = maximum . map sum . nonsegs

      #+END_SRC
  13. The Burrows–Wheeler transform ([[file:src/TheBurrowsWheelerTransform.hs][TheBurrowsWheelerTransform.hs]])
      #+BEGIN_SRC

transform :: Ord a => [a] -> ([a], Int)
transform xs = (map last xss, position xs xss)
  where xss = sort (rots xs)

position xs xss = length (takeWhile (<xs) xss)

rots :: Ord a => [a] -> [[a]]
rots xs = take (length xs) (iterate lrot xs)
  where lrot (x:xs) = xs ++ [x]


      #+END_SRC
  14. The last tail (TheLastTail.hs)
      #+BEGIN_SRC

maxtail :: Ord a => [a] -> [a]
maxtail = maximum . tails

      #+END_SRC
  15. All the common prefixes ([[file:src/AllTheCommonPrefixes.hs][AllTheCommonPrefixes.hs]])
      #+BEGIN_SRC
llcp :: Eq a => [a] -> [a] -> Int
llcp xs ys =  length $ takeWhile (uncurry (==)) $ zip xs ys

allcp :: Eq a => [a] -> [Int]
allcp xs = map (llcp xs) (tails xs)

      #+END_SRC
  16. The Boyer–Moore algorithm (TheBoyerMooreAlgorithm.hs)
  17. The Knuth–Morris–Pratt algorithm (The Knuth–Morris–Pratt algorithm.hs)
  18. Planning solves the rush hour problem (Planning solves the rush Hour Problem.hs)
  19. A simple Sudoku solver (A simple Sudoku Solver.hs)
  20. The countdown problem (The Countdown Problem.hs)
  21. Hylomorphisms and nexuses (Hylomorphisms And Nexuses.hs)
  22. Three ways of computing determinants (Three ways of Computing Determinants.hs)
  23. Inside the convex hull (Inside the Convex Hull.hs)
  24. Rational arithmetic coding (Rational Arithmetic Coding.hs)
  25. Integer arithmetic coding (Integer Arithmetic Coding.hs)
  26. The Schorr–Waite algorithm (The Schorr–Waite algorithm.hs)
  27. Orderly insertion (Orderly Insertion.hs)
  28. Loopless functional algorithms (Loopless Functional Algorithms.hs)
  29. The Johnson–Trotter algorithm (The Johnson–Trotter algorithm.hs)
  30. Spider spinning for dummies (Spider spinning For Dummies.hs)
  31. A Pointless Derivation of Radix Sort ([[file:src/APointlessDerivationOfRadixSort.hs][APointlessDerivationOfRadixSort.hs]])
      #+BEGIN_SRC
radixsort :: (Bounded b, Enum b, Eq b) => [a->b] -> [a] -> [a]
radixsort = foldr ft id
  where ft d g = concat . ptn d . g


      #+END_SRC
  32. The Under-Appreciated Unfold ([[file:src/TheUnderAppreciatedUnfold.hs][TheUnderAppreciatedUnfold.hs]])
      #+BEGIN_SRC
levelf' :: Forest b -> [[b]]
levelf' = unfold' null (map root) (concat . map kids)

levelt' :: Tree b -> [[b]]
levelt' t = levelf' [t]

bftt' :: Tree a -> [a]
bftt' = concat . levelt'

bftf' :: Forest a -> [a]
bftf' = concat . levelf'

      #+END_SRC
  33. Kleisli Categories ([[file:src/KleisliCategories.hs][KleisliCategories.hs]])
      - Examples from [[http://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/][Category Theory for Programmers: The Preface]] by Bartosz Milewski

  34. CATEGORICAL PROGRAMMING WITH INDUCTIVE AND COINDUCTIVE TYPES by VARMO VENE
      - Categorical Programming ([[file:src/CategoricalProgramming.hs][CategoricalProgramming.hs]])
